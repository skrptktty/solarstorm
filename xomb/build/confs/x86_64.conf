name = xomb

CC = x86_64-pc-elf-gcc
CFLAGS = -nostdlib -nodefaultlibs -g -DUSE_ASSERT -mcmodel=large

[*]
buildflags=-dc=ldc-xomb -d-version=KERNEL -g -disable-red-zone -O0

[../kernel/core/kmain.d]
buildflags=-dc=ldc-xomb -d-version=KERNEL -I.. -g -disable-red-zone -O0

# compile the assembly for the target

prebuild= \
\
\
echo ; \
echo Setting up Architecture Dependence: x86_64; \
echo '--> architecture.d';\
mkdir -p dsss_imports;\
mkdir -p dsss_objs;\
mkdir -p dsss_objs/G;\
mkdir -p dsss_objs/O;\
mkdir -p root/binaries;\
mkdir -p iso/binaries;\
cp ../kernel/arch/x86_64/imports/compile_typeinfo.sh dsss_imports/.;\
cp -r ../kernel/arch/x86_64/architecture dsss_imports/.;\
echo '--> nativecall.d';\
echo ; \
cp ../kernel/arch/x86_64/imports/nativecall.d ../user/.;\
echo Compiling Assembly for target: x86_64 ;\
echo '--> boot.s';\
yasm -o dsss_objs/O/kernel.arch.x86_64.boot.boot.o ../kernel/arch/x86_64/boot/boot.s -felf64 -g stabs;\
echo '--> load.s';\
yasm -o dsss_objs/O/kernel.arch.x86_64.boot.load.o ../kernel/arch/x86_64/boot/load.s -felf64;\
echo '--> trampoline.s';\
yasm -o dsss_objs/O/kernel.arch.x86_64.boot.trampoline.o ../kernel/arch/x86_64/boot/trampoline.s -felf64 -g stabs;\
\
\
echo ; \
echo Compiling Kernel Runtime ; \
echo '--> kernel/runtime/object.d';\
ldc -O0 -disable-red-zone -d-version=KERNEL -nodefaultlib -g -I.. -Idsss_imports/. -I../kernel/runtime/. -m64 -code-model=large -c ../kernel/runtime/object.d -ofdsss_objs/G/kernel.runtime.object.o; \
echo '--> kernel/runtime/invariant.d';\
ldc -O0 -disable-red-zone -d-version=KERNEL -nodefaultlib -g -I.. -Idsss_imports/. -I../kernel/runtime/. -m64 -code-model=large -c ../kernel/runtime/invariant.d -ofdsss_objs/G/kernel.runtime.invariant.o; \
echo '--> kernel/runtime/std/typeinfo/*';\
sh ./dsss_imports/compile_typeinfo.sh;\
echo '--> kernel/runtime/dstubs.d';\
ldc -O0 -disable-red-zone -d-version=KERNEL -nodefaultlib -g -I.. -Idsss_imports/. -I../kernel/runtime/. -m64 -code-model=large -c ../kernel/runtime/dstubs.d -ofdsss_objs/G/kernel.runtime.dstubs.o ;\
echo '--> kernel/runtime/util.d';\
ldc -O0 -disable-red-zone -d-version=KERNEL -nodefaultlib -g -I.. -I../kernel/runtime/. -Idsss_imports/. -m64 -code-model=large -c ../kernel/runtime/util.d -ofdsss_objs/G/kernel.runtime.util.o ;\
echo '--> kernel/runtime/std/moduleinit.d';\
ldc -O0 -disable-red-zone -d-version=KERNEL -nodefaultlib -g -I.. -I../kernel/runtime/. -Idsss_imports/. -m64 -code-model=large -c ../kernel/runtime/std/moduleinit.d -ofdsss_objs/G/kernel.runtime.std.moduleinit.o ;\
\
echo ; \
echo Compiling Kernel Proper ;

# what the target is

target = xomb.iso

# we will need some post build foo to link and create the iso

postbuild = \
\
echo ; \
echo Creating Kernel Executable; \
echo '--> xomb';\
#llvm-ld -native -Xlinker=-nostdlib -Xlinker=-Tlinker.ld -Xlinker="-b elf64-x86-64" `ls dsss_objs/G/*.o` -o iso/boot/xomb ; \
#llvm-ld -nodefaultlib -g -I.. -I../kernel/runtime/. `ls dsss_objs/G/*.o` ;\
ld -nostdlib -nodefaultlibs -b elf64-x86-64 -T ../kernel/arch/x86_64/linker.ld -o iso/boot/xomb `ls dsss_objs/G/*.o` `ls dsss_objs/O/*.o`;\
\
echo ;\
echo Compiling ISO; \
./buildiso.sh; \
\
echo ;\
echo Creating Kernel Symbol File; \
echo '--> xomb.sym';\
./mkldsym.sh iso/boot/xomb xomb.sym; \
\
